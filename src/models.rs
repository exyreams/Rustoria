//! Data models for Rustoria.
//!
//! This module defines the core data structures used in the Rustoria hospital management system.
//! It includes entities such as patients, staff members, and medical records.
//! This module encapsulates the data representation for patients, staff, and medical information,
//! providing a foundation for other modules like database interaction and API endpoints.
//! Primary types exposed are `Patient`, `StaffMember`, `MedicalRecord`, and supporting enums like `Gender` and `StaffRole`.

use serde::{Deserialize, Serialize};

/// Represents the gender identity of a patient.
///
/// This enum is used to store demographic information about patients. It's important
/// for tailoring medical treatments and ensuring inclusivity within the system.
/// The `Gender` enum provides a standardized way to represent gender identity, which is
/// then associated with `Patient` records.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Gender {
    /// Identifies as male.
    Male,
    /// Identifies as female.
    Female,
    /// Identifies as a gender not covered by the other options.
    Other,
}

/// Represents a patient in the hospital management system.
///
/// The `Patient` struct holds comprehensive information about an individual receiving care.
/// It is used for identifying patients, storing their contact details, and keeping track of
/// their medical history.
/// Use this struct to create, update, and retrieve patient information from the database or
/// other data stores.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Patient {
    /// Unique identifier for the patient.
    ///
    /// This ID is typically generated by the database. It's used to uniquely identify
    /// each patient record.
    pub id: i64,
    /// Patient's first/given name.
    pub first_name: String,
    /// Patient's last/family name.
    pub last_name: String,
    /// Patient's date of birth.
    ///
    /// Recommended format: YYYY-MM-DD. This is a string due to potential compatibility
    /// issues with different date formats.
    pub date_of_birth: String,
    /// Patient's gender identity.
    pub gender: Gender,
    /// Patient's residential address.
    pub address: String,
    /// Patient's contact phone number.
    pub phone_number: String,
    /// Patient's email address, if available.
    pub email: Option<String>,
    /// Summary of patient's relevant medical history.
    pub medical_history: Option<String>,
    /// List of patient's known allergies.
    pub allergies: Option<String>,
    /// Medications the patient is currently taking.
    pub current_medications: Option<String>,
}

/// Represents the role of a staff member within the hospital.
///
/// Different roles have different responsibilities and access permissions
/// within the hospital management system.  The `StaffRole` enum is used to define the
/// specific role and associated permissions for each `StaffMember`. This information is
/// essential for managing user access and ensuring data security.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub enum StaffRole {
    /// Medical doctor responsible for patient diagnosis and treatment.
    Doctor,
    /// Nursing staff responsible for patient care.
    Nurse,
    /// Administrative personnel managing hospital operations.
    Admin,
    /// Technical staff operating and maintaining medical equipment.
    Technician,
}

/// Represents a staff member in the hospital management system.
///
/// Contains personal and professional information necessary for identification and
/// communication within the hospital system. Use this struct to manage employee data,
/// track their roles, and facilitate communication within the hospital network.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StaffMember {
    /// Unique identifier for the staff member.
    pub id: i64,
    /// Staff member's full name.
    pub name: String,
    /// Professional role within the hospital.
    pub role: StaffRole,
    /// Contact phone number.
    pub phone_number: String,
    /// Email address, if available.
    pub email: Option<String>,
    /// Residential or mailing address.
    pub address: String,
}

/// Represents a medical record for a patient.
///
/// The `MedicalRecord` struct stores important medical information about a specific patient visit
/// or encounter. It's used to document diagnoses, treatments, and other relevant details.
/// Each `MedicalRecord` is associated with a specific `Patient` and may contain notes from doctors
/// and nurses, as well as prescriptions.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MedicalRecord {
    /// Unique identifier for the medical record.
    pub id: i64,
    /// The ID of the patient this record belongs to.
    pub patient_id: i64,
    /// Notes from the doctor about the patient's condition and treatment.
    pub doctor_notes: String,
    /// Notes from the nurse about the patient's care.
    pub nurse_notes: Option<String>,
    /// The diagnosis for the patient's condition.
    pub diagnosis: String,
    /// Any prescription given to the patient.
    pub prescription: Option<String>,
}
